---
import type { z } from "zod"
import { getCardBorder } from "~/lib/get-card-border"
import { talkSchema } from "~/lib/schemas"
import ResourceLink from "./talk-resource-link.astro"

export type Props = z.infer<typeof talkSchema>

const talkProps = Astro.props

const {
  event_name,
  title,
  kind,
  description,
  recording,
  slides,
  date_string,
  url,
} = await talkSchema.parseAsync(talkProps)

const eventDate = date_string === "TBD" ? null : new Date(date_string)
---

<li
  class={`cta-hover-sm p-2 relative rounded-lg bg-gradient-to-tr ${getCardBorder(
    kind,
  )}`}
>
  <div class="flex justify-between pr-4 absolute -top-8 w-full">
    <strong
      class="font-mono text-lg font-normal dark:text-slate-400 text-slate-600"
    >
      {event_name}
    </strong>
    {
      eventDate !== null && (
        <time
          class="font-mono text-md dark:text-slate-400 text-slate-600"
          date-time={eventDate.toISOString()}
        >
          {date_string}
        </time>
      )
    }
  </div>
  <div
    class="p-4 dark:bg-black bg-zinc-50 h-[100%] rounded-md grid grid-rows-[auto_1fr_auto]"
  >
    <h2 class="mb-3 text-2xl leading-snug">{title}</h2>
    {
      Boolean(description) && (
        <p class="mt-2 text-md leading-8 dark:text-slate-300 text-slate-800">
          {description}
        </p>
      )
    }
    <div class="flex justify-around mt-10 text-lg text-slate-200 bg-">
      {typeof url === "string" && <ResourceLink url={url}>event</ResourceLink>}
      {
        typeof recording === "string" && (
          <ResourceLink url={recording}>recording</ResourceLink>
        )
      }
      {
        typeof slides === "string" && (
          <ResourceLink url={slides}>slides</ResourceLink>
        )
      }
    </div>
  </div>
</li>
